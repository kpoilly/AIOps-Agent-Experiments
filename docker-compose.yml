services:
  news-classifier-api:
    build: ./src/api
    ports:
      - "8080:8080"
    restart: always

  evaluation:
    build: ./src/evaluation

  api-gateway:
    build: ./src/api_gateway
    ports:
      - "8000:8000"
    environment:
      - AGENT_CORE_SERVICE_URL=http://aiops-agent-monitor:8005/diagnose_alert
    depends_on:
      - aiops-agent-monitor
    restart: always

  aiops-agent-monitor:
    build: ./src/aiops_agent_monitor
    ports:
      - "8005:8005"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME}
      - LANGCHAIN_TRACING_V2="true"
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT="AIOps Monitor Agent Internal Runs"
      - POSTGRES_HOST=${POSTGRES_HOST} 
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PROMETHEUS_TOOL_SERVICE_URL=http://prometheus-tool-service:8001
      - LOKI_TOOL_SERVICE_URL=http://loki-tool-service:8002
      - GRAFANA_TOOL_SERVICE_URL=http://grafana-tool-service:8003
    depends_on:
      - prometheus
      - loki
      - news-classifier-api
      - postgres
      - prometheus-tool-service
      - loki-tool-service
      - grafana-tool-service
    restart: always

  prometheus-tool-service:
    build: ./src/tool_services/prometheus_tool
    ports:
      - "8001:8001"
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - prometheus
    restart: always

  loki-tool-service:
    build: ./src/tool_services/loki_tool
    ports:
      - "8002:8002"
    environment:
      - LOKI_URL="http://loki:3100"
    depends_on:
      - loki
    restart: always

  grafana-tool-service:
    build: ./src/tool_services/grafana_tool
    ports:
      - "8003:8003"
    environment:
      - GRAFANA_URL="http://grafana:3000"
    depends_on:
      - grafana
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./deployment/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./deployment/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_JSON_ENABLED=true
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - prometheus
    restart: always

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    restart: always

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./deployment/loki/loki-config.yaml:/etc/loki/config.yaml
    command: -config.file=/etc/loki/config.yaml
    restart: always

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./deployment/promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: always

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

volumes:
  prometheus_data: {}
  grafana_data: {}
  loki_data: {}

  postgres_data: {}
